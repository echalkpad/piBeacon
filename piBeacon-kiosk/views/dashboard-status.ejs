<!DOCTYPE html>
<html>
  <head>
		<meta http-equiv="refresh" content="600">
    <title>node-server</title>

    <link rel="stylesheet" href="/css/bootstrap.css">
    <link rel="stylesheet" href="/css/app.css"/>
  
    <script src="/lib/d3/d3.v3.js"></script>
  	<script src="/lib/sockjs/sockjs-0.3.js"></script>
  	<script src="/lib/angular/angular.js"></script>
    <script src="/lib/angular/angular-resource.js"></script>
    <script src="/lib/angular/angular-sanitize.js"></script>
    
  </head>
  <body>
  
  	<style>
    
  		.page {
        width: 100%;
        height: 100%;
        min-height: 100%;
        background-color: lightgray;
        display: block;
  		}
		
  		.widget-span1 {
  		  height: 70px;
  		  background-color: #EEE;
  		  border: 1px solid #DDD;
  		  margin-bottom: 3px;
  		}
    
  		.widget-span2 {
  		  height: 140px;
  		  background-color: #EEE;
  		  border: 1px solid #DDD;
  		  margin-bottom: 3px;
  		}
    
  		.widget-span3 {
  		  height: 110px;
  		  background-color: #EEE;
  		  border: 1px solid #DDD;
  		  margin-bottom: 3px;
  		}
    
  		.widget-span4 {
  		  height: 235px;
  		  background-color: #EEE;
  		  border: 1px solid #DDD;
  		  margin-bottom: 3px;
  		}
    
  		.widget-span6 {
  		  height: 470px;
  		  background-color: #EEE;
  		  border: 1px solid #DDD;
  		  margin-bottom: 3px;
  		}
    
  		.widget-span12 {
  		  height: 600px;
  		  background-color: #EEE;
  		  border: 1px solid #DDD;
  		  margin-bottom: 3px;
  		}
    
  		.header, .footer {
  		  background-color: lightgray;
  		  border: 1px solid lightgray;
  		  height: 36px;
  		  margin-bottom: 18px;
  		}
    
      svg {
        font: 10px sans-serif;
      }
   
      .line {
        fill: none;
        stroke: blue;
        stroke-width: 1.5px;
      }
 
      .axis path,
      .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
      }
  	</style>
    
    <h1>Raspberry Pi Dashboard</h1>
    
		<h2>Network interfaces:</h2>
    <ul>
			<%for (var i = 0; i < iPV4Interfaces.length; i++) { %>
				<li> <%= iPV4Interfaces[i].name  %> =  <%= iPV4Interfaces[i].family  %> ,  <%= iPV4Interfaces[i].address  %></li>
			<% } %>
		</ul>
		
		<h2>Bluetooth:</h2>
    <% if (title) { %>
			<p> iBeacon <%= title %> </p>
		<% } %>
		
	  <div class="header"> Bluetooth Low Energy Engagement Status  </div>
    
    <div class="row show-grid4">
      <div class="span4" >RSSI Filter Average<div class="rssi-filter-average"></div></div>
      <div class="span4" >RSSI Filter None<div class="rssi-filter-none"></div></div>
      <div class="span4" >RSSI Filter State<div class="rssi-filter-state"></div></div>
      </div>
    
    <div class="footer"> - </div>
    
     <script>
    
      //FilterChart
      var chartWidth = 235;
      var chartHeight = 160;
   
      var n = 40,
        random = d3.random.normal(0, .2),
        data = d3.range(n).map(random);

     var margin = {top: 20, right: 20, bottom: 20, left: 40},
        width = chartWidth - margin.left - margin.right,
        height = chartHeight - margin.top - margin.bottom;

     var x = d3.scale.linear()
        .domain([0, n - 1])
        .range([0, width]);

    var y = d3.scale.linear()
        .domain([-80, 1])
        .range([height, 0]);

    var line = d3.svg.line()
        .x(function(d, i) { return x(i); })
        .y(function(d, i) { return y(d); });

    var svgAverage = d3.selectAll(".rssi-filter-average").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svgAverage.append("defs").append("clipPath")
        .attr("id", "clip")
        .append("rect")
        .attr("width", width)
        .attr("height", height);

    svgAverage.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + y(0) + ")")
        .call(d3.svg.axis().scale(x).orient("bottom"));

    svgAverage.append("g")
        .attr("class", "y axis")
        .call(d3.svg.axis().scale(y).orient("left"));

    var pathAverage = svgAverage.append("g")
        .attr("clip-path", "url(#clip)")
      .append("path")
        .datum(data)
        .attr("class", "line")
        .attr("d", line);
     
     
      var svgNone = d3.selectAll(".rssi-filter-none").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        svgNone.append("defs").append("clipPath")
            .attr("id", "clip")
            .append("rect")
            .attr("width", width)
            .attr("height", height);

        svgNone.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + y(0) + ")")
            .call(d3.svg.axis().scale(x).orient("bottom"));

        svgNone.append("g")
            .attr("class", "y axis")
            .call(d3.svg.axis().scale(y).orient("left"));

        var pathNone = svgNone.append("g")
            .attr("clip-path", "url(#clip)")
          .append("path")
            .datum(data)
            .attr("class", "line")
            .attr("d", line);
         
     
     
            var svgState = d3.selectAll(".rssi-filter-state").append("svg")
                  .attr("width", width + margin.left + margin.right)
                  .attr("height", height + margin.top + margin.bottom)
                .append("g")
                  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

              svgState.append("defs").append("clipPath")
                  .attr("id", "clip")
                  .append("rect")
                  .attr("width", width)
                  .attr("height", height);

              svgState.append("g")
                  .attr("class", "x axis")
                  .attr("transform", "translate(0," + y(0) + ")")
                  .call(d3.svg.axis().scale(x).orient("bottom"));

              svgState.append("g")
                  .attr("class", "y axis")
                  .call(d3.svg.axis().scale(y).orient("left"));

              var pathState = svgState.append("g")
                  .attr("clip-path", "url(#clip)")
                .append("path")
                  .datum(data)
                  .attr("class", "line")
                  .attr("d", line);
               
                   
         
         

    tick();

    function tick() {
   
      // push a new data point onto the back
      data.push(random());
   
      // redraw the line, and slide it to the left
      pathAverage
          .attr("d", line)
          .attr("transform", null)
        .transition()
          .duration(500)
          .ease("linear")
          .attr("transform", "translate(" + x(-1) + ",0)")
          .each("end", tick);
   
      // pop the old data point off the front
      data.shift();
    }//end tick
 
    var sockAverage = new SockJS('http://192.168.2.2:9999/chat');
    var sockNone = new SockJS('http://192.168.2.2:9999/bleRSSIRaw');
    var sockState = new SockJS('http://192.168.2.2:9999/bleRSSIRaw');
 
    function CtrlRSSIFilterAverage($scope) {
     
        $scope.messages = [];
     
        sockAverage.onmessage = function(e) {
       
          // push a new data point onto the back
          var rssiValue = parseFloat(e.data);
          console.log( rssiValue );
          //rssiValue = random();
       
          data.push(rssiValue);
       
          // redraw the line, and slide it to the left
          pathAverage
              .attr("d", line)
              .attr("transform", null)
            .transition()
              .duration(500)
              .ease("linear")
              .attr("transform", "translate(" + x(-1) + ",0)")
              .each("end", tick);
       
          // pop the old data point off the front
          data.shift();
        };
     
    }//end CtrlRSSIFilterAverage
 
 
 
    function CtrlRSSIFilterNone($scope) {
     
        $scope.messages = [];
     
        sockNone.onmessage = function(e) {
       
          // push a new data point onto the back
          var rssiValue = parseFloat(e.data);
          console.log( rssiValue );
          //rssiValue = random();
       
          data.push(rssiValue);
       
          // redraw the line, and slide it to the left
          pathNone
              .attr("d", line)
              .attr("transform", null)
            .transition()
              .duration(500)
              .ease("linear")
              .attr("transform", "translate(" + x(-1) + ",0)")
              .each("end", tick);
       
          // pop the old data point off the front
          data.shift();
        };
     
    }//end CtrlRSSIFilterNone
 
 
    function CtrlRSSIFilterState($scope) {
     
        $scope.messages = [];
     
        sockState.onmessage = function(e) {
       
          // push a new data point onto the back
          var rssiValue = parseFloat(e.data);
          console.log( rssiValue );
          //rssiValue = random();
       
          data.push(rssiValue);
       
          // redraw the line, and slide it to the left
          pathState
              .attr("d", line)
              .attr("transform", null)
            .transition()
              .duration(500)
              .ease("linear")
              .attr("transform", "translate(" + x(-1) + ",0)")
              .each("end", tick);
       
          // pop the old data point off the front
          data.shift();
        };
     
    }//end CtrlRSSIFilterState
 
 
 
    </script>
 
    <div ng-controller="CtrlRSSIFilterAverage"> </div>  
    
     <!-- App Resources -->
     <script src="/js/app.js"></script>
     <script src="/js/services.js"></script>
     <script src="/js/controllers.js"></script>
     <script src="/js/filters.js"></script>
     <script src="/js/directives.js"></script>
     
		</body>
</html>
