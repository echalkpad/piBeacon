<!doctype html>
<html lang="en" ng-app="piboard.dashboard">
<head>
	<meta http-equiv="refresh" content="200">
  <meta charset="utf-8">
  <title>StrongLoop Dashboard</title>
  <link rel="stylesheet" href="css/bootstrap.css">
  <link rel="stylesheet" href="css/app.css"/>
  
  <script src="lib/d3/d3.v3.js"></script>
	<script src="lib/sockjs/sockjs-0.3.js"></script>
	<script src="lib/angular/angular.js"></script>
  <script src="lib/angular/angular-resource.js"></script>
  <script src="lib/angular/angular-sanitize.js"></script>
  
</head>
<body>
  
  <h1>RSSI Strip Chart</h1>
  
  <style>
  svg {
    font: 10px sans-serif;
  }
   
  .line {
    fill: none;
    stroke: #000;
    stroke-width: 1.5px;
  }
  
  .line2  {
    fill: none;
    stroke: blue;
    stroke-width: 1.5px;
  }
  
  .line3  {
    fill: none;
    stroke: green;
    stroke-width: 1.5px;
  }
 
  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }
 
  </style>
  
  <div class="header"> Bluetooth Low Energy Engagement Status  </div>
  
  <div class="row show-grid4">
    <div class="span4" ><div class="rssi"></div></div>
    <!-- 
    <div class="span4" >RSSI Filter State<div class="rssi-filter-state"></div></div>
    -->
  </div>
  
  <div class="footer"> - </div>
  
  <script>
 
  var chartWidth = 320;
  var chartHeight = 240;
 
  var n = 40,
      random = d3.random.normal(0, .2),
      data2 = d3.range(n).map(random),
      data3 = d3.range(n).map(random),
      data = d3.range(n).map(random);
  
  var margin = {top: 20, right: 20, bottom: 20, left: 40},
      width = chartWidth - margin.left - margin.right,
      height = chartHeight - margin.top - margin.bottom;
 
  var x = d3.scale.linear().domain([0, n - 1]).range([0, width]); 
  var y = d3.scale.linear().domain([-100, 1]).range([height, 0]);
  
  var line = d3.svg.line().x(function(d, i) { return x(i); }).y(function(d, i) { return y(d); });
  var line2 = d3.svg.line().x(function(d, i) { return x(i); }).y(function(d, i) { return y(d); });
  var line3 = d3.svg.line().x(function(d, i) { return x(i); }).y(function(d, i) { return y(d); });
  
  var svg = d3.select(".rssi").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
 
  svg.append("defs").append("clipPath")
      .attr("id", "clip")
    .append("rect")
      .attr("width", width)
      .attr("height", height);
 
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + y(0) + ")")
      .call(d3.svg.axis().scale(x).orient("bottom"));
 
  svg.append("g")
      .attr("class", "y axis")
      .call(d3.svg.axis().scale(y).orient("left"));
 
  var pathFilterNone = svg.append("g")
      .attr("clip-path", "url(#clip)")
    .append("path")
      .datum(data)
      .attr("class", "line")
      .attr("d", line);

  var pathFilterAverage = svg.append("g")
      .attr("clip-path", "url(#clip)")
    .append("path")
      .datum(data2)
      .attr("class", "line2")
      .attr("d", line2);
  
  var pathFilterState = svg.append("g")
      .attr("clip-path", "url(#clip)")
    .append("path")
      .datum(data3)
      .attr("class", "line3")
      .attr("d", line3);
      
  tick();
  
  function tick() {
    
    // push a new data point onto the back
    data.push(random());
    
    // redraw the line, and slide it to the left
    pathFilterNone
        .attr("d", line)
        .attr("transform", null)
      .transition()
        .duration(500)
        .ease("linear")
        .attr("transform", "translate(" + x(-1) + ",0)")
        .each("end", tick);
    
    // pop the old data point off the front
    data.shift();
  }//end tick
  
  var sockRSSIRawServer = new SockJS('http://192.168.2.2:9999/piBeaconUUID/RSSIRawServer');
  sockRSSIRawServer.onmessage = function(e) {
      console.log( "sockRSSIRawServer.onmessage" );
      console.log( e );
      
      // push a new data point onto the back
      var bleaconBlob = JSON.parse(e.data);
      console.log( bleaconBlob );
      console.log( bleaconBlob.rssi );
      console.log( bleaconBlob.uuid );
      console.log( bleaconBlob.proximity );
      
      data.push( parseFloat(bleaconBlob.rssi) );
      
      pathFilterNone
        .attr("d", line)
        .attr("transform", null)
      .transition()
        .duration(500)
        .ease("linear")
        .attr("transform", "translate(" + x(-1) + ",0)")
        .each("end", tick);
      
      data.shift();
  }
  
  var sockRSSIAverageServer = new SockJS('http://192.168.2.2:9999/piBeaconUUID/RSSIAverageServer');
  sockRSSIAverageServer.onmessage = function(e) {
      console.log( "sockRSSIAverageServer.onmessage" );
      console.log( e );
      
      // push a new data point onto the back
      var rssiValue = parseFloat(e.data);
      console.log( rssiValue );
      //rssiValue = random();
      
      data2.push(rssiValue);
   
      // redraw the line, and slide it to the left
      pathFilterAverage
          .attr("d", line2)
          .attr("transform", null)
        .transition()
          .duration(500)
          .ease("linear")
          .attr("transform", "translate(" + x(-1) + ",0)")
          .each("end", tick);
   
      // pop the old data point off the front
      data2.shift();
  }
  
  
  //proximity State
  var sockRSSIStateServer = new SockJS('http://192.168.2.2:9999/piBeaconUUID/RSSIStateServer');
  sockRSSIStateServer.onmessage = function(e) {
      console.log( "sockRSSIRSSIStateServer.onmessage" );
      console.log( e );
      
      // push a new data point onto the back
      var stateValue = e.data;
      console.log( stateValue );
      //current proximity ('unknown', 'immediate', 'near', or 'far')
      if ( stateValue == "immediate" )
        data3.push(-20);
      else if ( stateValue == "near" )
        data3.push(-50);
      else if ( stateValue == "far" )
        data3.push(-80);
      else if ( stateValue == "unknown" )
        data3.push(-100);
      else
        data3.push(0);
      
      // redraw the line, and slide it to the left
      pathFilterState
          .attr("d", line3)
          .attr("transform", null)
        .transition()
          .duration(500)
          .ease("linear")
          .attr("transform", "translate(" + x(-1) + ",0)")
          .each("end", tick);
   
      // pop the old data point off the front
      data3.shift();
  }
  </script>
  
	<!-- App Resources -->
  <script src="js/app.js"></script>
  <script src="js/services.js"></script>
  <script src="js/controllers.js"></script>
  <script src="js/filters.js"></script>
  <script src="js/directives.js"></script>
  <script type="text/javascript">
	
</body>
</html>
